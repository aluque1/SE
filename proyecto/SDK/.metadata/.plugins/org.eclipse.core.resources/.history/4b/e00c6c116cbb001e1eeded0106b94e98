#include "xparameters.h"
#include "stdio.h"
#include "xutil.h"

#include "xgpio.h"

//===============================================================================
// PRÁCTICA : Zumbador
//===============================================================================


void ZUMBADOR_inicializa(XGpio* Gpio_zumbador, Xuint32 zumbador) {
	Xuint32 status;

	// Configuración de la GPIO para el zumbador de la placa de expansión
	status = XGpio_Initialize(Gpio_zumbador, zumbador);

	if (status != XST_SUCCESS)
		xil_printf("Error en la inicializacion\r\n");
	else{
		XGpio_SetDataDirection(Gpio_zumbador, 1, 0x00);
		xil_printf("Inicializado con exito\r\n");
	}
}

void ZUMBADOR_suena(XGpio* Gpio_zumbador) {
	XGpio_DiscreteWrite(Gpio_zumbador, 1, (u8)0);
}

void ZUMBADOR_calla(XGpio *Gpio_zumbador) {
	XGpio_DiscreteWrite(Gpio_zumbador, 1, (u8)1);
}

int main (void) {

   xil_printf("Practica zumbador\r\n");

   unsigned int i;

	// La instancia del zumbador usada para la comunicación con el propio zumbador
	XGpio Gpio_zumbador;

	// Los Device IDs del zumbador para la comunicación con el propio zumbador
	Xuint32 zumbador = XPAR_BUZZER_DEVICE_ID;

	ZUMBADOR_inicializa(&Gpio_zumbador, zumbador);

	while (1){
		ZUMBADOR_suena(&Gpio_zumbador);
		xil_printf("Suena\r\n");
		for(i = 0; i < 0x00070000; i++){} // retardo

		ZUMBADOR_calla(&Gpio_zumbador);
		xil_printf("Calla\r\n");
		for(i = 0; i < 0x00070000; i++){} // retardo
	}

   return 0;
}
