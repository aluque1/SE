/*
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 */

/*
 *
 *
 * This file is a generated sample test application.
 *
 * This application is intended to test and/or illustrate some
 * functionality of your system.  The contents of this file may
 * vary depending on the IP in your system and may use existing
 * IP driver functions.  These drivers will be generated in your
 * SDK application project when you run the "Generate Libraries" menu item.
 *
 */

#include <stdio.h>
#include "xparameters.h"
#include "xil_cache.h"
#include "xbasic_types.h"
#include "banner.h"
#include "keypad.h"
#include "leds_rgb.h"
#include "kbd_ps2.h"
#include "buzzer.h"

/**
 * User definitions for the banner
 */
const int A[7] = {0x04, 0x0A, 0x11, 0x1F, 0x11, 0x11, 0x11}; 
const int C[7] = {0x0E, 0x11, 0x10, 0x10, 0x10, 0x11, 0x0E}; 
const int D[7] = {0x1E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x1E}; 
const int E[7] = {0x1F, 0x10, 0x10, 0x1E, 0x10, 0x10, 0x1F}; 
const int I[7] = {0x1F, 0x04, 0x04, 0x04, 0x04, 0x04, 0x1F}; 
const int K[7] = {0x11, 0x12, 0x14, 0x18, 0x14, 0x12, 0x11}; 
const int L[7] = {0x10, 0x10, 0x10, 0x10, 0x10, 0x11, 0x1F}; 
const int M[7] = {0x11, 0x1B, 0x15, 0x15, 0x11, 0x11, 0x11}; 
const int N[7] = {0x11, 0x11, 0x19, 0x15, 0x13, 0x11, 0x11}; 
const int O[7] = {0x0E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E}; 
const int R[7] = {0x1E, 0x11, 0x11, 0x1E, 0x14, 0x12, 0x11}; 
const int S[7] = {0x0E, 0x11, 0x10, 0x0E, 0x01, 0x11, 0x0E}; 
const int T[7] = {0x1F, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04}; 
const int U[7] = {0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E}; 
const int SPACE[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const int ZERO[7] = {0x0E, 0x11, 0x13, 0x15, 0x19, 0x11, 0x0E};
const int ONE[7] = {0x04, 0x0C, 0x14, 0x04, 0x04, 0x04, 0x1F};
const int TWO[7] = {0x0E, 0x11, 0x01, 0x02, 0x04, 0x08, 0x1F};
const int THREE[7] = {0x0E, 0x11, 0x01, 0x06, 0x01, 0x11, 0x0E};

const int INTENTO_1[8][7] = {I, N, T, E, N, T, O, ONE};
const int INTENTO_2[8][7] = {I, N, T, E, N, T, O, TWO};
const int INTENTO_3[8][7] = {I, N, T, E, N, T, O, THREE};
const int ALARMA[8][7] = {SPACE, SPACE, A, L, A, R, M, A};
const int START[8][7] = {SPACE, SPACE, SPACE, S, T, A, R, T};
const int UNLOCKED[8][7] = {U, N, L, O, C, K, E, D};



//** Function Definitions **//
int getNumber();
char ps2ToAscii(int scanCode);
void soundAlarm();
void unlock();

int main()
{
	Xuint32 opt = -1;
	Xuint32 keypadPass[4];
	Xuint32 ps2Pass[8];
	Xuint32 keypadTry[4];
	Xuint32 ps2Try[8];
	short cont = 3;

	leds_init();
	banner_init();
	print("---Entering main---\n\r");

	banner_put_phrase(START);
	do
	{
		print(" Eliga una opcion: \n\r");
		print(" 1  : KEYPAD (password of length 4)\n\r");
		print(" 2  : TECLADO (password of length 8)\n\r");
		print(" 0  : Salir \n\r");
		opt = getNumber();


	} while (opt < 0 || opt > 2);

	switch (opt)
	{
	case 0:
		print("Saliendo... \n\r");
		break;
	case 1:

	}
	if (opt == 1)
	{
		// record password
		record_passKP(keypadPass);
		print(" Passoword saved\n\r");
		while (cont > 0)
		{
			switch (cont)
			{
			case 3:
				banner_put_phrase(INTENTO_1);
				break;
			case 2:
				banner_put_phrase(INTENTO_2);
				break;
			case 1:
				banner_put_phrase(INTENTO_3);
				break;
			default:
				soundAlarm();
				break;
			}
			record_passKP(keypadTry);
			int i;
			if (keypadTry[0] == keypadPass[0] && keypadTry[1] == keypadPass[1] && keypadTry[2] == keypadPass[2] && keypadTry[3] == keypadPass[3])
			{
				unlock();
				cont = 0;
			}
			else
			{
				--cont;
			}
		}
	}

	print("Saliendo ...\n\r");

	return 0;
}

// Set 2 Make/Break codes to ASCII
char ps2ToAscii(int scanCode)
{
}

void soundAlarm()
{
	unsigned int i;
	XGpio Gpio_zumbador;
	Xuint32 zumbador = XPAR_BUZZER_0_DEVICE_ID;
	ZUMBADOR_init(&Gpio_zumbador, zumbador);
	banner_put_phrase(ALARMA); // imprimir mensaje de alarma

	while (1)
	{
		ZUMBADOR_suena(&Gpio_zumbador);
		xil_printf("Suena\r\n");
		LEDS_RGB_mWriteSlaveReg0(XPAR_LEDS_RGB_0_BASEADDR, 0, 0); // encender led rojo
		for (i = 0; i < 0x00070000; i++)
		{
		} // retardo

		ZUMBADOR_calla(&Gpio_zumbador);
		xil_printf("Calla\r\n");
		LEDS_RGB_mWriteSlaveReg0(XPAR_LEDS_RGB_0_BASEADDR, 0, 255); // apagar led rojo
		for (i = 0; i < 0x00070000; i++)
		{
		} // retardo
	}
}

void unlock()
{
	unsigned int i;
	banner_put_phrase(UNLOCKED);								  // imprimir mensaje de desbloqueo
	LEDS_RGB_mWriteSlaveReg0(XPAR_LEDS_RGB_0_BASEADDR, 0, 0); // encender led verde
	for (i = 0; i < 0x00070000; i++)
	{
	}															// retardo
	LEDS_RGB_mWriteSlaveReg0(XPAR_LEDS_RGB_0_BASEADDR, 0, 255); // apagar led verde
}

int getNumber()
{
	Xuint8 byte;
	Xuint8 uartBuffer[16];
	Xboolean validNumber;
	int digitIndex;
	int digit, number, sign;
	int c;

	while (1)
	{
		byte = 0x00;
		digit = 0;
		digitIndex = 0;
		number = 0;
		validNumber = XTRUE;

		// get bytes from uart until RETURN is entered

		while (byte != 0x0d && byte != 0x0A)
		{
			byte = XUartLite_RecvByte(XPAR_XPS_UARTLITE_0_BASEADDR);
			uartBuffer[digitIndex] = byte;
			XUartLite_SendByte(XPAR_XPS_UARTLITE_0_BASEADDR, byte);
			digitIndex++;
		}

		// calculate number from string of digits

		for (c = 0; c < (digitIndex - 1); c++)
		{
			if (c == 0)
			{
				// check if first byte is a "-"
				if (uartBuffer[c] == 0x2D)
				{
					sign = -1;
					digit = 0;
				}
				// check if first byte is a digit
				else if ((uartBuffer[c] >> 4) == 0x03)
				{
					sign = 1;
					digit = (uartBuffer[c] & 0x0F);
				}
				else
					validNumber = XFALSE;
			}
			else
			{
				// check byte is a digit
				if ((uartBuffer[c] >> 4) == 0x03)
				{
					digit = (uartBuffer[c] & 0x0F);
				}
				else
					validNumber = XFALSE;
			}
			number = (number * 10) + digit;
		}
		number *= sign;
		if (validNumber == XTRUE)
		{
			return number;
		}
		print("This is not a valid number");
	}
}
